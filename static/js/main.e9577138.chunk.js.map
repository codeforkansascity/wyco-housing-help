{"version":3,"sources":["components/PropertyList/index.jsx","components/PropertyMap/index.jsx","components/Search/index.jsx","components/UserInput/index.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","list","overflow","width","height","margin","mobileList","PropertyList","props","isMobile","useMediaQuery","classes","results","allParcels","undefined","i","length","address","attributes","LAndBAnkTop100CSVUpdate_csv_Add","city","LAndBAnkTop100CSVUpdate_csv_CIT","state","LAndBAnkTop100CSVUpdate_csv_STA","zip","LAndBAnkTop100CSVUpdate_csv_ZIP","appraised","LAndBAnkTop100CSVUpdate_csv_App","push","ListItem","key","Card","style","padding","textAlign","backgroundColor","List","className","map","mobileMap","PropertyMap","locations","hash","require","center","zoom","TileLayer","url","attribution","GeoJSON","data","color","Search","useState","setResults","setLocations","listView","setListView","useEffect","RANK","UserMax","price","URL","fetchParcels","a","fetch","response","json","features","parcels","fetchLocations","Typography","marginBottom","display","flexDirection","justifyContent","Button","variant","size","onClick","theme","formControl","spacing","form","maxWidth","mobileForm","UserInput","setPrice","Container","marginTop","Box","Paper","FormControl","TextField","id","value","onChange","e","target","label","NavMenu","setValue","BottomNavigation","newValue","showLabels","BottomNavigationAction","component","Link","to","icon","About","Welcome","App","basename","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e9577138.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, List, ListItem } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useMediaQuery } from \"@material-ui/core\";\r\n\r\n// styling for mobile/full\r\nconst useStyles = makeStyles(() => ({\r\n  list: {\r\n    overflow: \"auto\",\r\n    width: \"60vw\",\r\n    height: \"45vh\",\r\n    margin: \"0 auto\",\r\n  },\r\n  mobileList: {\r\n    overflow: \"auto\",\r\n    width: \"90vw\",\r\n    height: \"35vh\",\r\n    margin: \"0 auto\",\r\n  },\r\n}));\r\n\r\nconst PropertyList = (props) => {\r\n  // for media breakpoints\r\n  const isMobile = useMediaQuery(\"(max-width: 700px)\");\r\n\r\n  // style classes\r\n  const classes = useStyles();\r\n\r\n  const results = props.results;\r\n\r\n  // On each render, reset list of parcels.\r\n  // Add one parcel element for each one listed in response.\r\n  // Each parcel element should contain descriptive info on that parcel.\r\n  // Since results is undefined on rerender, 'if' is required to prevent reference error. Correction?\r\n  const allParcels = [];\r\n  if (results !== undefined) {\r\n    for (let i = 0; i < results.length; i++) {\r\n      let address = results[i]?.attributes.LAndBAnkTop100CSVUpdate_csv_Add;\r\n      let city = results[i]?.attributes.LAndBAnkTop100CSVUpdate_csv_CIT;\r\n      let state = results[i]?.attributes.LAndBAnkTop100CSVUpdate_csv_STA;\r\n      let zip = results[i]?.attributes.LAndBAnkTop100CSVUpdate_csv_ZIP;\r\n      let appraised = results[i]?.attributes.LAndBAnkTop100CSVUpdate_csv_App;\r\n      allParcels.push(\r\n        <ListItem key={i}>\r\n          <Card\r\n            style={{\r\n              padding: \"1%\",\r\n              textAlign: \"left\",\r\n              width: \"90vw\",\r\n            }}\r\n          >\r\n            {/* Map/image placeholder */}\r\n            <div\r\n              style={{\r\n                height: \"10vh\",\r\n                width: \"30vw\",\r\n                backgroundColor: \"#F0F0F0\",\r\n              }}\r\n            />\r\n\r\n            <h3>${appraised}</h3>\r\n            <em>\r\n              {address}, {city}, {state}, {zip}\r\n            </em>\r\n          </Card>\r\n        </ListItem>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {isMobile ? (\r\n        <List className={classes.mobileList}>\r\n          {results && <div>{allParcels}</div>}\r\n        </List>\r\n      ) : (\r\n        <List className={classes.list}>\r\n          {results && <div>{allParcels}</div>}\r\n        </List>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PropertyList;\r\n","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer, GeoJSON } from \"react-leaflet\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useMediaQuery } from \"@material-ui/core\";\r\n\r\n// styling for mobile/full\r\nconst useStyles = makeStyles(() => ({\r\n  map: {\r\n    width: \"60vw\",\r\n    height: \"50vh\",\r\n    margin: \"0 auto\",\r\n  },\r\n  mobileMap: {\r\n    width: \"90vw\",\r\n    height: \"40vh\",\r\n    margin: \"0 auto\",\r\n  },\r\n}));\r\n\r\nconst PropertyMap = (props) => {\r\n  // for media breakpoints\r\n  const isMobile = useMediaQuery(\"(max-width: 700px)\");\r\n\r\n  // style classes\r\n  const classes = useStyles();\r\n\r\n  const locations = props.locations;\r\n  // generate unique keys to rerender results\r\n  const hash = require(\"object-hash\");\r\n\r\n  return (\r\n    <div>\r\n      {isMobile ? (\r\n        <LeafletMap\r\n          className={classes.mobileMap}\r\n          center={[39.125, -94.65]}\r\n          zoom={13}\r\n        >\r\n          <TileLayer\r\n            url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          />\r\n\r\n          <GeoJSON\r\n            key={hash(locations)}\r\n            data={locations}\r\n            style={{ color: \"blue\" }}\r\n          />\r\n        </LeafletMap>\r\n      ) : (\r\n        <LeafletMap className={classes.map} center={[39.125, -94.65]} zoom={13}>\r\n          <TileLayer\r\n            url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          />\r\n\r\n          <GeoJSON\r\n            key={hash(locations)}\r\n            data={locations}\r\n            style={{ color: \"blue\" }}\r\n          />\r\n        </LeafletMap>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PropertyMap;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Typography } from \"@material-ui/core\";\r\n\r\nimport PropertyList from \"../PropertyList\";\r\n\r\nimport PropertyMap from \"../PropertyMap\";\r\n\r\n// passes search results to be displayed in list or map components.\r\n\r\nconst Search = (props) => {\r\n  // store response from ArcGIS API\r\n  const [results, setResults] = useState([]);\r\n  const [locations, setLocations] = useState();\r\n  // toggle list view\r\n  const [listView, setListView] = useState(true);\r\n  const toggleList = () => {\r\n    setListView(true);\r\n  };\r\n  const toggleMap = () => {\r\n    setListView(false);\r\n  };\r\n\r\n  // query arcGIS api to retrieve property info.\r\n  // store in custom hook?\r\n  useEffect(() => {\r\n    const COST = \"LAndBAnkTop100CSVUpdate_csv_App\";\r\n    const CITY = \"LAndBAnkTop100CSVUpdate_csv_CIT\";\r\n    const RANK = \"LAndBAnkTop100CSVUpdate_csv_Ran\";\r\n    const UserMax = props.price.price;\r\n\r\n    const URL =\r\n      `https://services1.arcgis.com/Qo2HHQp8vgPs2wg3/arcgis/rest/services/LandBankRankingUpdate/FeatureServer/0/query` +\r\n      `?where=${CITY} = 'KANSAS CITY' AND ` +\r\n      `${RANK} > 2283 AND ` +\r\n      `${COST} < ${UserMax}` +\r\n      `&orderByFields=${RANK} DESC&outFields=*&f=`;\r\n\r\n    // query for property data to show in list\r\n    const fetchParcels = async () => {\r\n      const response = await fetch(URL + \"json\");\r\n      const json = await response.json();\r\n      const parcels = await json.features;\r\n      setResults(parcels);\r\n    };\r\n\r\n    // query for location data to show in map\r\n    const fetchLocations = async () => {\r\n      const response = await fetch(URL + \"geojson\");\r\n      const json = await response.json();\r\n      setLocations(json);\r\n    };\r\n\r\n    // retrieve data\r\n    fetchParcels();\r\n    fetchLocations();\r\n  }, [props]);\r\n\r\n  return (\r\n    <div>\r\n      <Typography style={{ marginBottom: \"1vh\" }}>\r\n        {results && results.length + \" results\"}\r\n      </Typography>\r\n      <div style={{ marginBottom: \"1vh\" }}>\r\n        {listView === true && <PropertyList results={results} />}\r\n        {listView === false && <PropertyMap locations={locations} />}\r\n      </div>\r\n      {results && (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\",\r\n            marginBottom: \"3vh\",\r\n          }}\r\n        >\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            onClick={toggleList}\r\n          >\r\n            List\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"secondary\"\r\n            size=\"large\"\r\n            onClick={toggleMap}\r\n          >\r\n            Map\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Container,\r\n  Box,\r\n  Paper,\r\n  FormControl,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport Search from \"../Search\";\r\nimport { useMediaQuery } from \"@material-ui/core\";\r\n\r\n//styling for form inputs\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    width: \"80%\",\r\n  },\r\n  form: {\r\n    width: \"60vw\",\r\n    maxWidth: \"1000px\",\r\n    margin: \"0 auto 2vh\",\r\n  },\r\n  mobileForm: {\r\n    width: \"90vw\",\r\n    margin: \"0 auto 2vh\",\r\n  },\r\n}));\r\n\r\nconst UserInput = () => {\r\n  // for media breakpoints\r\n  const isMobile = useMediaQuery(\"(max-width: 700px)\");\r\n\r\n  // style classes\r\n  const classes = useStyles();\r\n\r\n  // initialize state with no locations\r\n  const [price, setPrice] = useState(\"\");\r\n\r\n  return (\r\n    <Container style={{ marginTop: \"5vh\" }}>\r\n      {isMobile ? (\r\n        <Box className={classes.mobileForm}>\r\n          <Paper>\r\n            <Typography variant=\"h4\">Search Top 100 Properties</Typography>\r\n            {/* Price Input */}\r\n            <FormControl className={classes.formControl}>\r\n              <TextField\r\n                id=\"Price\"\r\n                value={price}\r\n                onChange={(e) => setPrice(e.target.value)}\r\n                label=\"Maximum Price\"\r\n                variant=\"standard\"\r\n              />\r\n            </FormControl>\r\n          </Paper>\r\n        </Box>\r\n      ) : (\r\n        <Box className={classes.form}>\r\n          <Paper>\r\n            <Typography variant=\"h4\">Search Top 100 Properties</Typography>\r\n            {/* Price Input */}\r\n            <FormControl className={classes.formControl}>\r\n              <TextField\r\n                id=\"Price\"\r\n                value={price}\r\n                onChange={(e) => setPrice(e.target.value)}\r\n                label=\"Maximum Price\"\r\n                variant=\"standard\"\r\n              />\r\n            </FormControl>\r\n          </Paper>\r\n        </Box>\r\n      )}\r\n\r\n      <Search price={{ price }} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UserInput;\r\n","import React, { useState } from \"react\";\nimport \"./styles/App.css\";\n\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport InfoIcon from \"@material-ui/icons/Info\";\n\n//import our components\nimport UserInput from \"./components/UserInput\";\nimport {\n  Typography,\n  BottomNavigation,\n  BottomNavigationAction,\n} from \"@material-ui/core\";\n\nconst NavMenu = () => {\n  const [value, setValue] = useState(0);\n\n  return (\n    <BottomNavigation\n      value={value}\n      onChange={(e, newValue) => {\n        setValue(newValue);\n      }}\n      showLabels\n    >\n      <BottomNavigationAction\n        label=\"Search\"\n        component={Link}\n        to=\"/search\"\n        value=\"search\"\n        icon={<SearchIcon />}\n      />\n      <BottomNavigationAction\n        label=\"About\"\n        component={Link}\n        to=\"/about\"\n        value=\"about\"\n        icon={<InfoIcon />}\n      />\n    </BottomNavigation>\n  );\n};\n\nconst About = () => {\n  return (\n    <div style={{ height: \"60vh\" }}>\n      <h2>About</h2>\n    </div>\n  );\n};\n\nconst Welcome = () => {\n  return (\n    <div>\n      <h2>Welcome</h2>\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Wyco Housing Help</h1>\n        </header>\n        <body margin=\"0 auto\">\n          <Route exact path=\"/\" component={Welcome} />\n          <Route exact path=\"/search\" component={UserInput} />\n          <Route exact path=\"/about\" component={About} />\n        </body>\n        <NavMenu />\n        <footer\n          style={{\n            height: \"5vh\",\n            marginTop: \"5vh\",\n          }}\n        >\n          <Typography variant=\"caption\">2020 Code for KC</Typography>\n        </footer>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//boilerplate imports from CRA\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}