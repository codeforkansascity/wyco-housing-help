{"version":3,"sources":["PropertyList/index.jsx","Search/index.jsx","UserInput/index.jsx","App.js","serviceWorker.js","index.js"],"names":["PropertyList","props","results","allParcels","undefined","i","length","address","attributes","LAndBAnkTop100CSVUpdate_csv_Add","city","LAndBAnkTop100CSVUpdate_csv_CIT","state","LAndBAnkTop100CSVUpdate_csv_STA","zip","LAndBAnkTop100CSVUpdate_csv_ZIP","appraised","LAndBAnkTop100CSVUpdate_csv_App","push","ListItem","key","Card","style","margin","padding","textAlign","width","height","backgroundColor","marginBottom","List","overflow","maxHeight","maxWidth","Search","useState","setResults","useEffect","RANK","UserMax","price","a","fetch","response","json","features","parcels","fetchParcels","useStyles","makeStyles","theme","formControl","spacing","minWidth","form","UserInput","classes","setPrice","Container","Box","className","Paper","FormControl","TextField","id","value","onChange","e","target","label","variant","NavMenu","to","About","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1ef5fca8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, List, ListItem } from \"@material-ui/core\";\r\n\r\nconst PropertyList = (props) => {\r\n  const results = props.results;\r\n\r\n  // On each render, reset list of parcels.\r\n  // Add one parcel element for each one listed in response.\r\n  // Each parcel element should contain descriptive info on that parcel.\r\n  // Since results is undefined on rerender, 'if' is required to prevent reference error. Correction?\r\n  const allParcels = [];\r\n  if (results !== undefined) {\r\n    for (let i = 0; i < results.length; i++) {\r\n      let address = results[i]?.attributes.LAndBAnkTop100CSVUpdate_csv_Add;\r\n      let city = results[i]?.attributes.LAndBAnkTop100CSVUpdate_csv_CIT;\r\n      let state = results[i]?.attributes.LAndBAnkTop100CSVUpdate_csv_STA;\r\n      let zip = results[i]?.attributes.LAndBAnkTop100CSVUpdate_csv_ZIP;\r\n      let appraised = results[i]?.attributes.LAndBAnkTop100CSVUpdate_csv_App;\r\n      allParcels.push(\r\n        <ListItem key={i}>\r\n          <Card\r\n            style={{\r\n              margin: \"2vh auto\",\r\n              padding: \"1%\",\r\n              textAlign: \"left\",\r\n              width: \"50vw\",\r\n            }}\r\n          >\r\n            {/* Map/image placeholder */}\r\n            <div\r\n              style={{\r\n                height: \"10vh\",\r\n                width: \"30vw\",\r\n                backgroundColor: \"#F0F0F0\",\r\n              }}\r\n            />\r\n\r\n            <h3>${appraised}</h3>\r\n            <em>\r\n              {address}, {city}, {state}, {zip}\r\n            </em>\r\n          </Card>\r\n        </ListItem>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p style={{ marginBottom: \"5px\" }}>\r\n        {results && results.length + \" results\"}\r\n      </p>\r\n      <List\r\n        style={{\r\n          overflow: \"auto\",\r\n          margin: \"0 auto\",\r\n          maxHeight: \"50vh\",\r\n          maxWidth: \"50vw\",\r\n        }}\r\n      >\r\n        {results && <div>{allParcels}</div>}\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PropertyList;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport PropertyList from \"../PropertyList\";\r\n\r\n// passes search results to be displayed in list or map components.\r\n\r\nconst Search = (props) => {\r\n  const [results, setResults] = useState();\r\n\r\n  // query arcGIS api to retrieve property info.\r\n  // store in custom hook?\r\n  useEffect(() => {\r\n    const COST = \"LAndBAnkTop100CSVUpdate_csv_App\";\r\n    const CITY = \"LAndBAnkTop100CSVUpdate_csv_CIT\";\r\n    const RANK = \"LAndBAnkTop100CSVUpdate_csv_Ran\";\r\n    const UserMax = props.price.price;\r\n    const fetchParcels = async () => {\r\n      const response = await fetch(\r\n        `https://services1.arcgis.com/Qo2HHQp8vgPs2wg3/arcgis/rest/services/LandBankRankingUpdate/FeatureServer/0/query` +\r\n          `?where=${CITY} = 'KANSAS CITY' AND ` +\r\n          `${RANK} > 2283 AND ` +\r\n          `${COST} < ${UserMax}` +\r\n          `&orderByFields=${RANK} DESC&outFields=*&f=json`\r\n      );\r\n      const json = await response.json();\r\n      const parcels = await json.features;\r\n      setResults(parcels);\r\n    };\r\n    fetchParcels();\r\n  }, [props]);\r\n\r\n  return (\r\n    <div>\r\n      <PropertyList results={results} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Container,\r\n  Box,\r\n  Paper,\r\n  FormControl,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport Search from \"../Search\";\r\n\r\n//styling for form inputs\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: \"50vw\",\r\n  },\r\n  form: {\r\n    width: \"60vw\",\r\n    margin: \"5vh auto\",\r\n  },\r\n}));\r\n\r\nconst UserInput = () => {\r\n  // style classes\r\n  const classes = useStyles();\r\n\r\n  // initialize state with no locations\r\n  const [price, setPrice] = useState(\"\");\r\n\r\n  return (\r\n    <Container>\r\n      <Box className={classes.form}>\r\n        <Paper>\r\n          <h2>Search Top 100 Land Bank Properties</h2>\r\n          {/* Price Input */}\r\n          <FormControl className={classes.formControl}>\r\n            <TextField\r\n              id=\"Price\"\r\n              value={price}\r\n              onChange={(e) => setPrice(e.target.value)}\r\n              label=\"Maximum Price\"\r\n              variant=\"standard\"\r\n            />\r\n          </FormControl>\r\n        </Paper>\r\n      </Box>\r\n      <Search price={{ price }} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UserInput;\r\n","import React from \"react\";\nimport \"./styles/App.css\";\n\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n//import our components\nimport UserInput from \"./UserInput\";\n\nconst NavMenu = () => {\n  return (\n    <div>\n      <Link to=\"/\">\n        <button>Home</button>\n      </Link>\n      <Link to=\"/about\">\n        <button>About</button>\n      </Link>\n    </div>\n  );\n};\n\nconst About = () => {\n  return (\n    <div>\n      <h2>About</h2>\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Hello, header</h1>\n          <NavMenu />\n        </header>\n        <div>\n          <Route exact path=\"/wyco-housing-help/search\" component={UserInput} />\n          <Route exact path=\"/wyco-housing-help/about\" component={About} />\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//boilerplate imports from CRA\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}