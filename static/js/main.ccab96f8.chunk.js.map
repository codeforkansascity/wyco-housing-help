{"version":3,"sources":["components/PropertyList/index.jsx","components/PropertyMap/index.jsx","components/Search/index.jsx","components/UserInput/index.jsx","components/NavMenu/index.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","list","overflow","width","height","margin","mobileList","PropertyList","props","isMobile","useMediaQuery","classes","results","allParcels","undefined","i","length","address","attributes","LAndBAnkTop100CSVUpdate_csv_Add","city","LAndBAnkTop100CSVUpdate_csv_CIT","state","LAndBAnkTop100CSVUpdate_csv_STA","zip","LAndBAnkTop100CSVUpdate_csv_ZIP","appraised","LAndBAnkTop100CSVUpdate_csv_App","push","ListItem","key","Card","style","padding","textAlign","backgroundColor","List","className","map","mobileMap","PropertyMap","locations","type","features","hash","require","center","zoom","TileLayer","url","attribution","GeoJSON","data","color","Search","useState","setResults","setLocations","listView","setListView","useEffect","abortController","AbortController","RANK","UserMax","price","URL","fetchParcels","a","fetch","response","json","parcels","fetchLocations","abort","Typography","marginBottom","display","flexDirection","justifyContent","Button","variant","size","onClick","theme","formControl","spacing","form","maxWidth","mobileForm","UserInput","setPrice","Container","marginTop","Box","Paper","FormControl","TextField","id","value","onChange","e","target","label","NavMenu","setValue","BottomNavigation","newValue","showLabels","minWidth","BottomNavigationAction","component","Link","to","icon","About","align","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","ExpansionPanelDetails","Welcome","App","basename","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ccab96f8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, List, ListItem } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useMediaQuery } from \"@material-ui/core\";\r\n\r\n// styling for mobile/full\r\nconst useStyles = makeStyles(() => ({\r\n  list: {\r\n    overflow: \"auto\",\r\n    width: \"60vw\",\r\n    height: \"45vh\",\r\n    margin: \"1vh auto 4vh\",\r\n  },\r\n  mobileList: {\r\n    overflow: \"auto\",\r\n    width: \"90vw\",\r\n    height: \"35vh\",\r\n    margin: \"1vh auto 4vh\",\r\n  },\r\n}));\r\n\r\nconst PropertyList = (props) => {\r\n  // for media breakpoints\r\n  const isMobile = useMediaQuery(\"(max-width: 700px)\");\r\n\r\n  // style classes\r\n  const classes = useStyles();\r\n\r\n  const results = props.results;\r\n\r\n  // On each render, reset list of parcels.\r\n  // Add one parcel element for each one listed in response.\r\n  // Each parcel element should contain descriptive info on that parcel.\r\n  // Since results is undefined on rerender, 'if' is required to prevent reference error. Correction?\r\n  const allParcels = [];\r\n  if (results !== undefined) {\r\n    for (let i = 0; i < results.length; i++) {\r\n      let address = results[i]?.attributes.LAndBAnkTop100CSVUpdate_csv_Add;\r\n      let city = results[i]?.attributes.LAndBAnkTop100CSVUpdate_csv_CIT;\r\n      let state = results[i]?.attributes.LAndBAnkTop100CSVUpdate_csv_STA;\r\n      let zip = results[i]?.attributes.LAndBAnkTop100CSVUpdate_csv_ZIP;\r\n      let appraised = results[i]?.attributes.LAndBAnkTop100CSVUpdate_csv_App;\r\n      allParcels.push(\r\n        <ListItem key={i}>\r\n          <Card\r\n            style={{\r\n              padding: \"1%\",\r\n              textAlign: \"left\",\r\n              width: \"90vw\",\r\n            }}\r\n          >\r\n            {/* Map/image placeholder */}\r\n            <div\r\n              style={{\r\n                height: \"10vh\",\r\n                width: \"30vw\",\r\n                backgroundColor: \"#F0F0F0\",\r\n              }}\r\n            />\r\n\r\n            <h3>${appraised}</h3>\r\n            <em>\r\n              {address}, {city}, {state}, {zip}\r\n            </em>\r\n          </Card>\r\n        </ListItem>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {isMobile ? (\r\n        <List className={classes.mobileList}>\r\n          {results && <div>{allParcels}</div>}\r\n        </List>\r\n      ) : (\r\n        <List className={classes.list}>\r\n          {results && <div>{allParcels}</div>}\r\n        </List>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PropertyList;\r\n","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer, GeoJSON } from \"react-leaflet\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useMediaQuery } from \"@material-ui/core\";\r\n\r\n// styling for mobile/full\r\nconst useStyles = makeStyles(() => ({\r\n  map: {\r\n    width: \"60vw\",\r\n    height: \"50vh\",\r\n    margin: \"0 auto\",\r\n  },\r\n  mobileMap: {\r\n    width: \"90vw\",\r\n    height: \"40vh\",\r\n    margin: \"0 auto\",\r\n  },\r\n}));\r\n\r\nconst PropertyMap = (props) => {\r\n  // for media breakpoints\r\n  const isMobile = useMediaQuery(\"(max-width: 700px)\");\r\n\r\n  // style classes\r\n  const classes = useStyles();\r\n\r\n  let locations;\r\n\r\n  // GeoJSON component always requires a geoJSON as data.\r\n  // set a blank geoJSON when search fails to prevent crashing\r\n  if (!props.locations.type) {\r\n    locations = {\r\n      type: \"FeatureCollection\",\r\n      features: [],\r\n    };\r\n  } else {\r\n    locations = props.locations;\r\n  }\r\n\r\n  // generate unique keys to rerender results\r\n  const hash = require(\"object-hash\");\r\n\r\n  return (\r\n    <div>\r\n      {isMobile ? (\r\n        <LeafletMap\r\n          className={classes.mobileMap}\r\n          center={[39.125, -94.65]}\r\n          zoom={13}\r\n        >\r\n          <TileLayer\r\n            url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          />\r\n\r\n          <GeoJSON\r\n            key={hash(locations)}\r\n            data={locations}\r\n            style={{ color: \"blue\" }}\r\n          />\r\n        </LeafletMap>\r\n      ) : (\r\n        <LeafletMap className={classes.map} center={[39.125, -94.65]} zoom={13}>\r\n          <TileLayer\r\n            url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          />\r\n\r\n          <GeoJSON\r\n            key={hash(locations)}\r\n            data={locations}\r\n            style={{ color: \"blue\" }}\r\n          />\r\n        </LeafletMap>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PropertyMap;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Typography } from \"@material-ui/core\";\r\n\r\nimport PropertyList from \"../PropertyList\";\r\n\r\nimport PropertyMap from \"../PropertyMap\";\r\n\r\n// passes search results to be displayed in list or map components.\r\n\r\nconst Search = (props) => {\r\n  // store response from ArcGIS API\r\n  const [results, setResults] = useState([]);\r\n  const [locations, setLocations] = useState();\r\n  // toggle list view\r\n  const [listView, setListView] = useState(true);\r\n  const toggleList = () => {\r\n    setListView(true);\r\n  };\r\n  const toggleMap = () => {\r\n    setListView(false);\r\n  };\r\n\r\n  // query arcGIS api to retrieve property info.\r\n  // store in custom hook?\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n\r\n    // parameters for fetch request\r\n    const COST = \"LAndBAnkTop100CSVUpdate_csv_App\";\r\n    const CITY = \"LAndBAnkTop100CSVUpdate_csv_CIT\";\r\n    const RANK = \"LAndBAnkTop100CSVUpdate_csv_Ran\";\r\n    const UserMax = props.price.price;\r\n\r\n    // apply params to api call\r\n    const URL =\r\n      `https://services1.arcgis.com/Qo2HHQp8vgPs2wg3/arcgis/rest/services/LandBankRankingUpdate/FeatureServer/0/query` +\r\n      `?where=${CITY} = 'KANSAS CITY' AND ` +\r\n      `${RANK} > 2283 AND ` +\r\n      `${COST} < ${UserMax}` +\r\n      `&orderByFields=${RANK} DESC&outFields=*&f=`;\r\n\r\n    // query for property data to show in list\r\n    const fetchParcels = async () => {\r\n      const response = await fetch(URL + \"json\");\r\n      const json = await response.json();\r\n      const parcels = await json.features;\r\n      setResults(parcels);\r\n    };\r\n\r\n    // query for location data to show in map\r\n    const fetchLocations = async () => {\r\n      const response = await fetch(URL + \"geojson\");\r\n      const json = await response.json();\r\n      setLocations(json);\r\n    };\r\n\r\n    // retrieve data\r\n    fetchParcels();\r\n    fetchLocations();\r\n\r\n    // cleanup function to cancel requests after no longer needed\r\n    return () => {\r\n      abortController.abort();\r\n    };\r\n  }, [props]);\r\n\r\n  return (\r\n    <div>\r\n      <Typography style={{ marginBottom: \"1vh\" }}>\r\n        {results && results.length + \" results\"}\r\n      </Typography>\r\n      {results ? (\r\n        <div>\r\n          <div style={{ marginBottom: \"1vh\" }}>\r\n            {listView === true && <PropertyList results={results} />}\r\n            {listView === false && <PropertyMap locations={locations} />}\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"center\",\r\n              marginBottom: \"3vh\",\r\n              padding: \"2vw\",\r\n            }}\r\n          >\r\n            <Button\r\n              variant=\"text\"\r\n              color=\"primary\"\r\n              size=\"large\"\r\n              onClick={toggleList}\r\n            >\r\n              List\r\n            </Button>\r\n            <Button\r\n              variant=\"text\"\r\n              color=\"primary\"\r\n              size=\"large\"\r\n              onClick={toggleMap}\r\n            >\r\n              Map\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div\r\n          style={{\r\n            height: \"50vh\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n            Enter Max Price to View Results\r\n          </Typography>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Container,\r\n  Box,\r\n  Paper,\r\n  FormControl,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport Search from \"../Search\";\r\nimport { useMediaQuery } from \"@material-ui/core\";\r\n\r\n//styling for form inputs\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    width: \"80%\",\r\n  },\r\n  form: {\r\n    width: \"60vw\",\r\n    maxWidth: \"1000px\",\r\n    margin: \"0 auto 2vh\",\r\n  },\r\n  mobileForm: {\r\n    width: \"90vw\",\r\n    margin: \"0 auto 2vh\",\r\n  },\r\n}));\r\n\r\nconst UserInput = () => {\r\n  // for media breakpoints\r\n  const isMobile = useMediaQuery(\"(max-width: 700px)\");\r\n\r\n  // style classes\r\n  const classes = useStyles();\r\n\r\n  // initialize state with no locations\r\n  const [price, setPrice] = useState(\"\");\r\n\r\n  return (\r\n    <Container style={{ marginTop: \"5vh\" }}>\r\n      {isMobile ? (\r\n        <Box className={classes.mobileForm}>\r\n          <Paper>\r\n            <Typography variant=\"h4\">Search Top 100 Properties</Typography>\r\n            {/* Price Input */}\r\n            <FormControl className={classes.formControl}>\r\n              <TextField\r\n                id=\"Price\"\r\n                value={price}\r\n                onChange={(e) => setPrice(e.target.value)}\r\n                label=\"Maximum Price\"\r\n                variant=\"standard\"\r\n              />\r\n            </FormControl>\r\n          </Paper>\r\n        </Box>\r\n      ) : (\r\n        <Box className={classes.form}>\r\n          <Paper>\r\n            <Typography variant=\"h4\">Search Top 100 Properties</Typography>\r\n            {/* Price Input */}\r\n            <FormControl className={classes.formControl}>\r\n              <TextField\r\n                id=\"Price\"\r\n                value={price}\r\n                onChange={(e) => setPrice(e.target.value)}\r\n                label=\"Maximum Price\"\r\n                variant=\"standard\"\r\n              />\r\n            </FormControl>\r\n          </Paper>\r\n        </Box>\r\n      )}\r\n\r\n      <Search price={{ price }} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UserInput;\r\n","import React, { useState } from \"react\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport InfoIcon from \"@material-ui/icons/Info\";\r\nimport { BottomNavigation, BottomNavigationAction } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NavMenu = () => {\r\n  const [value, setValue] = useState(0);\r\n\r\n  return (\r\n    <BottomNavigation\r\n      value={value}\r\n      onChange={(e, newValue) => {\r\n        setValue(newValue);\r\n      }}\r\n      showLabels\r\n      style={{ minWidth: \"300px\" }}\r\n    >\r\n      <BottomNavigationAction\r\n        label=\"Search\"\r\n        component={Link}\r\n        to=\"/search\"\r\n        value=\"search\"\r\n        icon={<SearchIcon />}\r\n      />\r\n      <BottomNavigationAction\r\n        label=\"About\"\r\n        component={Link}\r\n        to=\"/about\"\r\n        value=\"about\"\r\n        icon={<InfoIcon />}\r\n      />\r\n    </BottomNavigation>\r\n  );\r\n};\r\n\r\nexport default NavMenu;\r\n","import React from \"react\";\nimport \"./styles/App.css\";\n\nimport { HashRouter, Route } from \"react-router-dom\";\n\n//import our components\nimport UserInput from \"./components/UserInput\";\nimport NavMenu from \"./components/NavMenu\";\nimport {\n  Typography,\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  ExpansionPanelDetails,\n} from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nconst About = () => {\n  return (\n    <div\n      style={{\n        height: \"60vh\",\n        padding: \"2vh\",\n        maxWidth: \"750px\",\n        margin: \"1vh auto\",\n        padding: \"5vw\",\n      }}\n    >\n      <Typography variant=\"h4\">About the Wyandotte County Land Bank</Typography>\n      <Typography variant=\"body1\" align=\"left\">\n        The Wyandotte County Land Bank is a unit of the Economic Development\n        Department. The Land Bank contains more than 3,500 vacant lots acquired\n        through the Judicial Foreclosure Process and donations. The duties of\n        this division are to put delinquent tax properties back on the tax roll\n        through various strategies that benefit the community. This includes\n        marketing, removing prior year taxes, maintaining an inventory list,\n        accepting parcels as donations and researching neighborhoods in\n        Wyandotte County that contain delinquent taxes.\n      </Typography>\n\n      <div style={{ margin: \"2vh 0 2vh\" }}>\n        {/* How? */}\n        <ExpansionPanel>\n          <ExpansionPanelSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"howpanel-content\"\n            id=\"howpanel-header\"\n          >\n            <Typography>\n              How does property get into the Wyandotte County Land Bank?\n            </Typography>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <Typography variant=\"subtitle2\" align=\"left\">\n              The Wyandotte County Land Bank acquires its property through tax\n              foreclosure. The land bank also reserves the right to accept land\n              through private donation that is deemed necessary or beneficial to\n              Wyandotte County’s community building efforts.\n            </Typography>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n\n        {/* What? */}\n        <ExpansionPanel>\n          <ExpansionPanelSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"whatpanel-content\"\n            id=\"whatpanel-header\"\n          >\n            <Typography>\n              What types of property are in the Wyandotte County Land Bank?\n            </Typography>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <Typography variant=\"subtitle2\" align=\"left\">\n              The Land Bank is divided into (3) types of parcels, which are\n              determined by the Unified Government Planning and Zoning\n              Department.\n              <br />\n              Non-Buildable Parcels: Parcels where houses or other large\n              buildings cannot be built, but garages, fencing, paving, or\n              similar structures can be built.\n              <br />\n              Buildable Parcels: Parcels of land without any free-standing\n              structures before purchase where structures such as houses or\n              other large buildings can be built.\n              <br />\n              Parcels with a Structure: Parcels of land with structures already\n              on them (including homes, garages, and businesses).\n            </Typography>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n\n        {/* Who? */}\n        <ExpansionPanel>\n          <ExpansionPanelSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"whopanel-content\"\n            id=\"whopanel-header\"\n          >\n            <Typography>\n              Who controls the property in the Land Bank, and what power do they\n              have?\n            </Typography>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <Typography variant=\"subtitle2\" align=\"left\">\n              The Land Bank Manager operates the Land Bank and serves at the\n              direction of the Land Bank Board of Trustees. Under state law\n              (K.S.A. 19-26,109), the board assumes possession and control of\n              any property it acquires and has the power to hold and administer\n              such property.\n              <br />\n              In the administration of property, the board is required to do the\n              following:\n              <ul>\n                <li>\n                  Manage, maintain and protect or temporarily use for a public\n                  purpose such property in the manner the board deems\n                  appropriate;\n                </li>\n                <li>\n                  Compile and maintain a written inventory of all such property.\n                  The inventory shall be available for public inspection and\n                  distribution at all times;\n                </li>\n                <li>\n                  Study, analyze and evaluate potential, present and future uses\n                  for such property which would provide for the effective\n                  reutilization of such property;\n                </li>\n                <li>\n                  Plan for and use the board's best efforts to consummate the\n                  sale or other disposition of such property at such times and\n                  upon such terms and conditions deemed appropriate;\n                </li>\n                <li>\n                  Establish and maintain records and accounts reflecting all\n                  transactions, expenditures and revenues relating to the bank's\n                  activities, including separate itemizations of all\n                  transactions, expenditures and revenues concerns each\n                  individual parcel of property acquired;\n                </li>\n                <li>\n                  Thirty days prior to the sale of any property owned by the\n                  bank, publish a notice in the official county newspaper\n                  announcing such sale.\n                </li>\n              </ul>\n            </Typography>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n      </div>\n    </div>\n  );\n};\n\nconst Welcome = () => {\n  return (\n    <div\n      style={{\n        padding: \"25vh 0 25vh\",\n      }}\n    >\n      <h2>Welcome</h2>\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Wyco Housing Help</h1>\n        </header>\n        <nav>\n          <NavMenu />\n        </nav>\n        <main margin=\"0 auto\">\n          <Route exact path=\"/\" component={Welcome} />\n          <Route exact path=\"/search\" component={UserInput} />\n          <Route exact path=\"/about\" component={About} />\n        </main>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//boilerplate imports from CRA\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}